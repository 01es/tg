package ua.com.fielden.platform.swing.menu;

import java.util.Set;

import javax.swing.tree.MutableTreeNode;

import ua.com.fielden.platform.dao.IEntityDao;
import ua.com.fielden.platform.entity.AbstractEntity;
import ua.com.fielden.platform.swing.menu.DynamicReportWrapper.CentreClosingEvent;
import ua.com.fielden.platform.swing.menu.DynamicReportWrapper.CentreClosingListener;
import ua.com.fielden.platform.swing.menu.api.IItemSelector;
import ua.com.fielden.platform.swing.review.DynamicCriteriaModelBuilder;
import ua.com.fielden.platform.swing.review.DynamicEntityReview;
import ua.com.fielden.platform.swing.review.DynamicEntityReviewWithTabs;

/**
 * {@link TreeMenuItem} that is generated by the {@link MiParentDynamicReport} and therefore may be removed.
 * 
 * @author oleh
 * 
 */
public class MiRemovableDynamicReport<T extends AbstractEntity, DAO extends IEntityDao<T>, R extends AbstractEntity> extends TreeMenuItem<DynamicReportWrapper<T, DAO, R>> implements IItemSelector {

    private static final long serialVersionUID = 1628351742425600699L;

    private final DynamicCriteriaModelBuilder<T, DAO, R> criteriaBuilder;

    /**
     * Creates new {@link MiRemovableDynamicReport} for the given {@link DynamicCriteriaModelBuilder} instance with specified title and information about this report.
     * 
     * @param title
     * @param description
     * @param criteriaBuilder
     */
    public MiRemovableDynamicReport(//
	    final String title,//
	    final String description,//
	    final DynamicCriteriaModelBuilder<T, DAO, R> criteriaBuilder,//
	    final TreeMenuWithTabs<?> treeMenu) {
	super(new DynamicReportWrapper<T, DAO, R>(title, description, criteriaBuilder, treeMenu));
	getView().addCentreClosingListener(new CentreClosingListener() {

	    @Override
	    public void centreClosing(final CentreClosingEvent event) {
		synchronizeAnalysis(treeMenu, criteriaBuilder);
	    }

	});
	this.criteriaBuilder = criteriaBuilder;
	addAnalysis(criteriaBuilder);
    }

    public DynamicCriteriaModelBuilder<T, DAO, R> getDynamicCriteriaModelBuilder() {
	return criteriaBuilder;
    }

    private void synchronizeAnalysis(final TreeMenuWithTabs<?> treeMenu,final DynamicCriteriaModelBuilder<T, DAO, R> criteriaBuilder) {
	final Set<String> analysis = criteriaBuilder.getWizardModel().getAnalysis().keySet();
	for (int childIndex = 0; childIndex < getChildCount(); childIndex++) {
	    if(!analysis.contains(getChildAt(childIndex).toString())){
		treeMenu.getModel().getOriginModel().removeNodeFromParent((MutableTreeNode)getChildAt(childIndex));
	    }
	}
	addAnalysis(criteriaBuilder);
	treeMenu.getModel().getOriginModel().reload(this);
    }

    private void addAnalysis(final DynamicCriteriaModelBuilder<T, DAO, R> criteriaBuilder){
	for (final String analysisName : criteriaBuilder.getWizardModel().getAnalysis().keySet()) {
	    addItem(new TreeMenuItemWrapper<T, DAO, R>(analysisName, this.isGroupItem()));
	}
    }


    @Override
    public void selectTreeMenuItem(final String name) {
	final DynamicEntityReview<T, DAO, R> view = getView().getView();
	if (view instanceof DynamicEntityReviewWithTabs) {
	    final DynamicEntityReviewWithTabs<T, DAO, R> viewWithTabs = (DynamicEntityReviewWithTabs<T, DAO, R>) view;
	    viewWithTabs.selectGridTab();
	}
    }

}
